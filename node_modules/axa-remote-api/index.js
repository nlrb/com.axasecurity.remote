'use strict'

const net = require('net');

/*
200: OK
210: Unlocked
211: Strong locked
260: Device info
261: Version
502: Command not implemented
*/

class AxaRemote {

  constructor(settings) {
    this.ip = settings.ip || '';
    this.port = settings.port || 23;
    this.interval = settings.interval || 3000;
    this.rxBuffer = '';
    this.responses = [];
    this.id = 0;
  }

  connect() {
    return new Promise((resolve, reject) => {
      this.socket = net.connect({ port: this.port, host: this.ip });

  		this.socket
  			.once('connect', () => {
          resolve();
				})
			  .once('timeout', () => {
  				this.disconnect(() => this.socket && this.socket.destroy())
  				reject(new Error('timeout'));
  			})
  			.once('error', (err) => {
  				this.disconnect(() => this.socket && this.socket.destroy())
  				reject(err);
  			})
  			.on('data', (chunk) => {
  				this.rxBuffer += chunk;
  				this.parseResponse(this.rxBuffer);
  			})
    })
  }

  disconnect() {
    if (this.socket) {
  		clearInterval(this.timer);
      this.socket.end();
    }
  }

  sendCommand(command) {
    return new Promise((resolve, reject) => {
      if (typeof command === 'string') {
        let id = this.id++;
        this.responses.push({ id: id, command: command, resolve: resolve, reject: reject });
        this.socket.write('\0'); // wake up
        this.socket.write(command + ':\r\n');
        setTimeout(() => {
          let idx = this.responses.findIndex(elem => elem.id === id);
          if (idx >=0) {
            // response has not been handled yet
            this.responses.splice(idx, 1);
            reject({ code: 501, message: 'No response' });
          }
        }, 2000);
      } else {
        reject(new Error('Invalid command'));
      }
    });
  }

  parseResponse(response) {
    if (response != null) {
      let lines = response.split('\r\n');
      //console.log(lines);
      lines.forEach(line => {
        if (line !== '') {
          if (line.slice(-1) === ':' || line === '\0') {
            // Ignore command echo
          } else {
            let result = line.match(/^(\d+) (.+)$/);
            if (this.responses.length > 0) {
              let response = this.responses.pop();
              if (result != null && result.length > 1) {
                let code = Number(result[1]);
                let reply = {
                  command: response.command,
                  code: code,
                  message: result[2]
                };
                if (code < 500) {
                  response.resolve(reply);
                } else {
                  response.reject(reply);
                }
              } else {
                response.reject({
                  command: response.command,
                  code: 500,
                  message: lines
                });
              }
            }
          }
        }
      });
      this.rxBuffer = '';
    }
  }

  checkAxaRemote() {
    return new Promise(async (resolve, reject) => {
      try {
        let result = await this.sendCommand('device');
        resolve((result.code === 260 && result.message === 'AXA RV2900 2.0'));
      } catch (e) {
        reject(e);
      }
    });
  }

}

module.exports = AxaRemote;
